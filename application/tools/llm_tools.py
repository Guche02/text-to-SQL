from langchain.chat_models import init_chat_model
from langchain.tools import tool
from utils.prompts import sql_gen_prompt_template, insights_prompt_template, error_handling_prompt_template
import os
from dotenv import load_dotenv

load_dotenv("../configs/.env")

api_key = os.getenv("MISTRAL_API_KEY")

mistral = init_chat_model("mistral-medium", model_provider="mistralai", temperature=0.5, mistral_api_key=api_key)

def generate_sql_query(query: str, schema_info: str):
    """
    Generates an SQL query based on the provided user query and database schema information using the Mistral model.
    
    Args:
        query (str): The user's question or request that requires an SQL query.
        schema_info (str): Information about the database schema (tables, columns, relationships, etc.) relevant to the query.
    
    Returns:
        str: The SQL query generated by the Mistral model to answer the user's question.
    """
    prompt = sql_gen_prompt_template.format(schema_info=schema_info, question=query)
    return mistral.invoke(prompt)

def handle_errors(error_message: str, previous_query: str):
    """
    Identifies and fixes SQL query errors by analyzing the error message and the previous query.
    Returns a corrected SQL query to fix the issue.

    Args:
        error_message (str): The error message returned by the database during query execution.
        previous_query (str): The original SQL query that resulted in the error.

    Returns:
        str: The corrected SQL query that resolves the error.
    """
    prompt = error_handling_prompt_template.format(failed_query=previous_query, error=error_message)
    return mistral.invoke(prompt)

def generate_insights(query_result: str):
    """
    Generates human-readable insights and summaries from the query result using the Mistral model.
    
    Args:
        query_result (str): The raw result of an executed SQL query (could be a list, dictionary, or another format).
    
    Returns:
        str: A concise, human-readable summary or insight based on the query result.
    """
    prompt = insights_prompt_template.format(result=query_result)
    return mistral.invoke(prompt)

